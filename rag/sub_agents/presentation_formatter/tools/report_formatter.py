# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Report formatting tools for presentation formatter."""

from datetime import datetime
from typing import Dict, Any

from google.adk.tools import ToolContext


def format_comprehensive_report(report_title: str, tool_context: ToolContext) -> Dict[str, str]:
    """
    Format a comprehensive report from all stored session analysis data.
    
    Args:
        report_title: Title for the comprehensive report
        tool_context: The ADK tool context for accessing session state
        
    Returns:
        Formatted comprehensive report
    """
    # Get all stored data
    student_profile = tool_context.state.get("student_profile", {})
    analysis_results = tool_context.state.get("analysis_results", {})
    timestamp = tool_context.state.get("analysis_timestamp", str(datetime.now()))
    
    # Build comprehensive report
    report_sections = []
    
    # Header
    report_sections.append(f"# {report_title}")
    report_sections.append(f"**Generated:** {timestamp}")
    report_sections.append("")
    
    # Student Profile Section
    if student_profile:
        report_sections.append("## Student Profile")
        if student_profile.get("name"):
            report_sections.append(f"**Student:** {student_profile['name']}")
        if student_profile.get("grade"):
            report_sections.append(f"**Grade:** {student_profile['grade']}")
        if student_profile.get("school"):
            report_sections.append(f"**School:** {student_profile['school']}")
        report_sections.append("")
    
    # Analysis Results Sections
    section_order = ["weakness_analysis", "solution_research", "study_plan", "data_retrieval"]
    section_titles = {
        "weakness_analysis": "## Identified Weaknesses",
        "solution_research": "## Research Findings & Solutions", 
        "study_plan": "## Personalized Study Plan",
        "data_retrieval": "## Supporting Data"
    }
    
    for section_key in section_order:
        if section_key in analysis_results:
            report_sections.append(section_titles.get(section_key, f"## {section_key.title()}"))
            content = analysis_results[section_key]["content"]
            report_sections.append(content)
            report_sections.append("")
    
    # Add any additional analysis results not in the standard order
    for analysis_type, data in analysis_results.items():
        if analysis_type not in section_order:
            report_sections.append(f"## {analysis_type.replace('_', ' ').title()}")
            report_sections.append(data["content"])
            report_sections.append("")
    
    # Summary section
    if analysis_results:
        report_sections.append("## Analysis Summary")
        report_sections.append(f"This comprehensive report contains {len(analysis_results)} analysis components:")
        for analysis_type in analysis_results.keys():
            report_sections.append(f"- {analysis_type.replace('_', ' ').title()}")
        report_sections.append("")
    
    # Footer
    report_sections.append("---")
    report_sections.append("*Report generated by Student Educational Analysis System*")
    
    formatted_report = "\n".join(report_sections)
    
    # Store the formatted report in session state
    tool_context.state["formatted_comprehensive_report"] = {
        "content": formatted_report,
        "title": report_title,
        "generated_at": str(datetime.now())
    }
    
    return {
        "formatted_report": formatted_report,
        "status": "Comprehensive report formatted and stored in session state",
        "sections_included": len(analysis_results),
        "word_count": len(formatted_report.split())
    }


def export_report_sections(section_type: str, tool_context: ToolContext) -> Dict[str, str]:
    """
    Export specific sections of the analysis for targeted formatting.
    
    Args:
        section_type: Type of section to export (weakness_analysis, study_plan, etc.)
        tool_context: The ADK tool context for accessing session state
        
    Returns:
        Specific section content formatted for export
    """
    analysis_results = tool_context.state.get("analysis_results", {})
    
    if section_type not in analysis_results:
        return {
            "error": f"Section '{section_type}' not found in analysis results",
            "available_sections": list(analysis_results.keys())
        }
    
    section_data = analysis_results[section_type]
    formatted_section = f"# {section_type.replace('_', ' ').title()}\n\n"
    formatted_section += section_data["content"]
    formatted_section += f"\n\n*Generated: {section_data['timestamp']}*"
    
    return {
        "section_content": formatted_section,
        "section_type": section_type,
        "status": f"Exported {section_type} section successfully"
    }


def get_session_summary(tool_context: ToolContext) -> Dict[str, Any]:
    """
    Get a summary of all stored session data.
    
    Args:
        tool_context: The ADK tool context for state access
        
    Returns:
        Summary of session state
    """
    summary = {
        "student_profile": tool_context.state.get("student_profile", {}),
        "analysis_count": len(tool_context.state.get("analysis_results", {})),
        "timestamp": tool_context.state.get("analysis_timestamp", ""),
        "available_analyses": list(tool_context.state.get("analysis_results", {}).keys())
    }
    
    return summary 